// Rozhina pasvei 4001231018  // Yeganeh davoodi moghadam 4001231039 
#include <iostream>
#include <vector>
#include <math.h>
#include <fstream>
using namespace std;
class polynomial;
class term;
void writefile(polynomial p);
void readfile(polynomial &p);
void binaryread(polynomial& poly, string fileName);
void binaryWrite(polynomial& poly, string fileName);
class error{
    string mas;
    public:
    error(string m){mas=m;}
    void pri(){cout << mas << endl;}
};
class term
{
    friend class polynomial;
private:
    float c;
    int p;

public:
    int get_p() const { return p; }
    float get_c() const { return c; }
    void set_p(int p1) { p = p1; }
    void set_c(float c1) { c = c1; }
    friend term operator+(const term &a, const term &b);
    friend term operator-(const term &a, const term &b);
    friend term operator*(const term &a, const term &b);
    friend term operator/(const term &a, const term &b);
    friend void operator+=(term &a, const term &b);
    friend void operator-=(term &a, const term &b);
    friend void operator+=(term &a, const term &b);
    friend void operator-=(term &a, const term &b);
    friend void operator*=(term &a, const term &b);
    friend void operator/=(term &a, const term &b);
    void operator=(const term &b)
    {
        (*this).p = b.p;
        (*this).c = b.c;
    }
    friend bool operator>(const term &a, const term &b);
    friend bool operator<(const term &a, const term &b);
    friend bool operator>=(const term &a, const term &b);
    friend bool operator<=(const term &a, const term &b);
    friend bool operator==(const term &a, const term &b);
    friend bool operator!=(const term &a, const term &b);
    friend term operator~(term &a);
    friend term operator++(term &a);
    friend term operator--(term &a);
    float operator()(const float &a)
    {
        float b;
        b = pow(a, p);
        b *= c;
        return b;
    }
    friend ostream &operator<<(ostream &out, const term t);
    friend istream &operator>>(istream &in, string s);

    term(float c1, int p1)
    {
        p = p1;
        c = c1;
    }
    term(float c1)
    {
        p = 0;
        c = c1;
    }
    term() {}
    ~term() {}
    void str_to_term(string s)
    {
        int counter;
    counter = s.find("x");
    if (counter<0||counter>s.size())
    {
        int check_float = s.find('.');
         int num1;
         int num2;
         float number;
        if(s[0]=='-'&&check_float > 0&&check_float<s.size()){
            num1 = atoi(s.substr(1, check_float).c_str());
            num2 = atoi(s.substr(check_float + 1, s.size()).c_str());
            number = num1 + num2 / pow(10, s.size() - check_float - 1);
            number*=-1;
        }
        else if(s[0]=='-'&&(check_float < 0||check_float>s.size())){
            number = atoi(s.substr(1, check_float).c_str());
            number*=-1;
        }
        else if(s[0]!='-'&&check_float > 0&&check_float<s.size()){
        num1 = atoi(s.substr(0, check_float).c_str());
        num2 = atoi(s.substr(check_float + 1, s.size()).c_str());
        number = num1 + num2 / pow(10, s.size() - check_float - 1);
        }
        else if(s[0]!='-'&&(check_float < 0||check_float>s.size())){
            number = atoi(s.substr(0, s.size()).c_str());
        }
        set_c(number);
        set_p(0);
    }
    else if (counter == 0)
    {
        int tavan;
        if (counter + 1 != s.size())
        {
            tavan = atoi(s.substr(counter + 2, s.size()).c_str());
            set_c(1);
            set_p(tavan);
        }
        else
        {
            set_c(1);
            set_p(1);
        }
    }
    else if (counter > 0&&counter<s.size())
    {

        int check_float = s.find('.');
        int check_negative = s.find('-');
        if (check_float > 0&&check_float<s.size())
        {
            int num1 = atoi(s.substr(0, check_float).c_str());
            int num2 = atoi(s.substr(check_float + 1, counter).c_str());
            float number = num1 + num2 / pow(10, counter - check_float - 1);
            if (counter + 1 != s.size())
            {
                int p1 = atoi(s.substr(counter + 2, s.size()).c_str());
                if (p1 > 0)
                {
                    set_c(number);
                    set_p(p1);
                }
            }
            else
            {
                set_c(number);
                set_p(1);
            }
        }
        else{
            if(s[0]=='-'&&counter==1){
                if (counter + 1 != s.size())
            {
                int p1 = atoi(s.substr(counter + 2, s.size()).c_str());
                if (p1 > 0)
                {
                    set_c(-1);
                    set_p(p1);
                }
            }
            else
            {
                set_c(-1);
                set_p(1);
            }
            }
            else{
            int num1 = atoi(s.substr(0, counter).c_str());
            if (counter + 1 != s.size())
            {
                int p1 = atoi(s.substr(counter + 2, s.size()).c_str());
                if (p1 > 0)
                {
                    set_c(num1);
                    set_p(p1);
                }
            }
            else
            {
                set_c(num1);
                set_p(1);
            }
        }
        }
        if (check_negative == 0&&check_float > 0&&check_float<s.size()) 
        {
            int num1 = atoi(s.substr(1, check_float).c_str());
            int num2 = atoi(s.substr(check_float + 1, counter).c_str());
            float number = num1 + num2 / pow(10, counter - check_float - 1);
            int p2 = -1; 
            if(counter+1!=s.size()){
                p2=atoi(s.substr(counter + 2, s.size()).c_str());
            }
            if (p2>0&&p2<s.size())
            {
                if (number > 0)
                {
                    set_c(number * -1);
                    set_p(p2);
                }
                else if (number == 0)
                {
                    set_c(-1);
                    set_p(p2);
                }
            }
            else
            {
                if (num2 > 0)
                {
                    set_c(number * -1);
                    set_p(1);
                }
                else if (num2 == 0)
                {
                    set_c(-1);
                    set_p(1);
                }
            }
        }
    }
    }
};
term operator+(const term &a, const term &b)
{
    term obj;
    if (a.p == b.p)
    {
        obj.c = a.c + b.c;
        obj.p = a.p;
        return obj;
    }
    throw error("you can't use + operator");
}
term operator-(const term &a, const term &b)
{
    term obj;
    if (a.p == b.p)
    {
        obj.c = a.c - b.c;
        obj.p = a.p;
        return obj;
    }
    throw error("you can't use - operator");
}
term operator*(const term &a, const term &b)
{
    term obj;
    obj.c = a.c * b.c;
    obj.p = a.p + b.p;
    return obj;
}
term operator/(const term &a, const term &b)
{
    term obj;
    obj.c = a.c / b.c;
    obj.p = a.p - b.p;
    return obj;
}
void operator+=(term &a, const term &b)
{
    if (a.p == b.p)
    {
        a.c += b.c;
    }
}
void operator-=(term &a, const term &b)
{
    if (a.p == b.p)
    {
        a.c -= b.c;
    }
}
void operator*=(term &a, const term &b)
{
    a.c *= b.c;
}
void operator/=(term &a, const term &b)
{
    a.c /= b.c;
}

bool operator>(const term &a, const term &b)
{
    if ((a.p > b.p) || ((a.p == b.p) && (a.c > b.c)))
    {
        return true;
    }
    else
    {
        return false;
    }
}
bool operator<(const term &a, const term &b)
{
    if ((a.p < b.p) || ((a.p == b.p) && (a.c < b.c)))
    {
        return true;
    }
    else
    {
        return false;
    }
}
bool operator>=(const term &a, const term &b)
{
    if (a.p > b.p)
    {
        return true;
    }
    else if (a.p == b.p)
    {
        if (a.c > b.c)
        {
            return true;
        }
        else if (a.c == b.c)
        {
            return true;
        }
        else if (a.c < b.c)
        {
            return false;
        }
    }
        return false;
}
bool operator<=(const term &a, const term &b)
{
    if (a.p > b.p)
    {
        return true;
    }
    else if (a.p == b.p)
    {
        if (a.c > b.c)
        {
            return true;
        }
        else if (a.c == b.c)
        {
            return true;
        }
        else if (a.c < b.c)
        {
            return false;
        }
    }
        return false;
}
bool operator==(const term &a, const term &b)
{
    if (a.p == b.p)
    {
        if (a.c == b.c)
        {
            return true;
        }
    }
        return false;
}
bool operator!=(const term &a, const term &b)
{
    if (a.p == b.p)
    {
        if (a.c == b.c)
        {
            return false;
        }
    }
        return true;
}
term operator~(term &a)
{
    term obj;
    obj.c = a.p * a.c;
    obj.p = (a.p) - 1;
    return obj;
}
term operator++(term &a)
{
    if (a.p == 0)
    {
        a.c++;
        return a;
    }
    throw error("you can't use + operator");
    // else   //question
}
term operator--(term &a)
{
    if (a.p == 0)
    {
        a.c--;
        return a;
    }
    throw error("you can't use + operator");
    // else   //question
}
ostream &operator<<(ostream &out, const term t)
{
    out << t.c << "x^" << t.p;
    return out;
}
istream &operator>>(istream &in, term t)
{
    int counter;
    string s;
    in >> s;
    counter = s.find("x");
    if (counter<0||counter>s.size())
    {
        int check_float = s.find('.');
         int num1;
         int num2;
         float number;
        if(s[0]=='-'&&check_float > 0&&check_float<s.size()){
            num1 = atoi(s.substr(1, check_float).c_str());
            num2 = atoi(s.substr(check_float + 1, s.size()).c_str());
            number = num1 + num2 / pow(10, s.size() - check_float - 1);
            number*=-1;
        }
        else if(s[0]=='-'&&(check_float < 0||check_float>s.size())){
            number = atoi(s.substr(1, check_float).c_str());
            number*=-1;
        }
        else if(s[0]!='-'&&check_float > 0&&check_float<s.size()){
        num1 = atoi(s.substr(0, check_float).c_str());
        num2 = atoi(s.substr(check_float + 1, s.size()).c_str());
        number = num1 + num2 / pow(10, s.size() - check_float - 1);
        }
        else if(s[0]!='-'&&(check_float < 0||check_float>s.size())){
            number = atoi(s.substr(0, s.size()).c_str());
        }
        t.set_c(number);
        t.set_p(0);
    }
    else if (counter == 0)
    {
        int tavan;
        if (counter + 1 != s.size())
        {
            tavan = atoi(s.substr(counter + 2, s.size()).c_str());
            t.set_c(1);
            t.set_p(tavan);
        }
        else
        {
            t.set_c(1);
            t.set_p(1);
        }
    }
    else if (counter > 0&&counter<s.size())
    {

        int check_float = s.find('.');
        int check_negative = s.find('-');
        if (check_float > 0&&check_float<s.size())
        {
            int num1 = atoi(s.substr(0, check_float).c_str());
            int num2 = atoi(s.substr(check_float + 1, counter).c_str());
            float number = num1 + num2 / pow(10, counter - check_float - 1);
            if (counter + 1 != s.size())
            {
                int p1 = atoi(s.substr(counter + 2, s.size()).c_str());
                if (p1 > 0)
                {
                    t.set_c(number);
                    t.set_p(p1);
                }
            }
            else
            {
                t.set_c(number);
                t.set_p(1);
            }
        }
        else{
            if(s[0]=='-'&&counter==1){
                if (counter + 1 != s.size())
            {
                int p1 = atoi(s.substr(counter + 2, s.size()).c_str());
                if (p1 > 0)
                {
                    t.set_c(-1);
                    t.set_p(p1);
                }
            }
            else
            {
                t.set_c(-1);
                t.set_p(1);
            }
            }
            else{
            int num1 = atoi(s.substr(0, counter).c_str());
            if (counter + 1 != s.size())
            {
                int p1 = atoi(s.substr(counter + 2, s.size()).c_str());
                if (p1 > 0)
                {
                    t.set_c(num1);
                    t.set_p(p1);
                }
            }
            else
            {
                t.set_c(num1);
                t.set_p(1);
            }
        }
        }
        if (check_negative == 0&&check_float > 0&&check_float<s.size()) 
        {
            int num1 = atoi(s.substr(1, check_float).c_str());
            int num2 = atoi(s.substr(check_float + 1, counter).c_str());
            float number = num1 + num2 / pow(10, counter - check_float - 1);
            int p2 = -1; 
            if(counter+1!=s.size()){
                p2=atoi(s.substr(counter + 2, s.size()).c_str());
            }
            if (p2>0&&p2<s.size())
            {
                if (number > 0)
                {
                    t.set_c(number * -1);
                    t.set_p(p2);
                }
                else if (number == 0)
                {
                    t.set_c(-1);
                    t.set_p(p2);
                }
            }
            else
            {
                if (num2 > 0)
                {
                    t.set_c(number * -1);
                    t.set_p(1);
                }
                else if (num2 == 0)
                {
                    t.set_c(-1);
                    t.set_p(1);
                }
            }
        }
    }
    return in;
}

class polynomial
{
    friend void writefile(polynomial p);
    friend void readfile(polynomial &p);
    friend void binaryread(polynomial& poly, string fileName);
    friend void binaryWrite(polynomial& poly, string fileName);
    vector<term> term1;

public:
    polynomial(vector<term> t1)
    {
        term1 = t1;
    }
    polynomial(term t1)
    {
        term1.push_back(t1);
    }
    polynomial() {}
    int get_poly()
    {
    	return term1.size();
	}
	int get_degree()
	{
		return term1[0].get_p();
	}
    friend polynomial operator+(const polynomial &a, const polynomial &b);
    friend polynomial operator-(const polynomial &a, polynomial &b);
    friend polynomial operator*(const polynomial &a, const polynomial &b);
    friend void operator+=(polynomial &a, const polynomial &b);
    friend void operator-=(polynomial &a, polynomial &b);
    friend void operator*=(polynomial &a, const polynomial &b);
    polynomial& operator=(const polynomial &b)
    {
        if (this == &b) {
            return *this;
        }
        term1.clear();
        for(int i=0;i<b.term1.size();i++)
        {term1.push_back(b.term1[i]);}
        return *this;
    }
    friend bool operator>(polynomial &a, polynomial &b);
    friend bool operator<(polynomial &a, polynomial &b);
    friend bool operator>=(polynomial &a,  polynomial &b);
    friend bool operator<=( polynomial &a, polynomial &b);
    friend bool operator==(polynomial &a, polynomial &b);
    friend bool operator!=( polynomial &a, polynomial &b);
    // polynomial operator~(){
    //     polynomial p;
    //     for (int i = 0; i < term1.size(); i++)
    //     {
    //         p.term1.push_back(~term1[i]);
    //     }
    //     return p;
    // }
    polynomial operator~(){
        vector <term> t;
        for (int i = 0; i < term1.size(); i++)
        {
            if ((~term1[i]).c != 0) {
                t.push_back(~term1[i]);
            }
            
        }
        return polynomial(t);
    }
    void operator++()
    {
        
            if (term1[term1.size()-1].get_p() == 0)
            {
                ++term1[term1.size()-1]; // question
            }
            else{
                term1.push_back(1);
            }
    }
    void operator--()
    {
        if (term1[term1.size()-1].get_p() == 0)
            {
                --term1[term1.size()-1]; // question
            }
            else{
                term1.push_back(-1);
            }
    }
    friend ostream &operator<<(ostream &out, const polynomial &b);
    friend istream &operator>>(istream &in, polynomial &p1);
    float operator()(float b)
    {
        float c = 0;
        for (int i = 0; i<term1.size(); i++)
        {
            c += term1[i](b);
        }
        return c;
    }

   
    term operator[](int a)
    {
        return term1[a];
    }
    void sort()
    {
        for (int i = 1; i < term1.size(); i++)
        {
            for (int j = 0; j < i; j++)
            {
                if (term1[i].p > term1[j].p || (term1[i].p == term1[j].p && term1[i].c > term1[j].c))
                {
                    swap(term1[i], term1[j]);
                }
            }
        }
    }
};
polynomial operator+(const polynomial &a, const polynomial &b)
{
    polynomial po;
    for (int i = 0; i < a.term1.size(); i++)
    {
        po.term1.push_back(a.term1[i]);
    }
    for (int j = 0; j < b.term1.size(); j++)
    {
        po.term1.push_back(b.term1[j]);
    }
    po.sort();
    for (int i = 1; i < po.term1.size(); i++)
    {
        if (po.term1[i].get_p() == po.term1[i - 1].get_p())
            po.term1[i - 1].set_c(po.term1[i].get_c() + po.term1[i - 1].get_c());
        po.term1.erase(po.term1.begin() + i);
    }
    return po;
}
polynomial operator-(const polynomial &a, polynomial &b)
{
    polynomial po;
    for (int i = 0; i < a.term1.size(); i++)
    {
        po.term1.push_back(a.term1[i]);
    }
    for (int j = 0; j < b.term1.size(); j++)
    {
        b.term1[j].set_c(b.term1[j].get_c() * -1);
        po.term1.push_back(b.term1[j]); // a=3x^2+3x   b=5x^2+4
    }
    po.sort();
    for (int i = 1; i < po.term1.size(); i++)
    {
        if (po.term1[i].get_p() == po.term1[i - 1].get_p())
            po.term1[i - 1].set_c(po.term1[i].get_c() - po.term1[i - 1].get_c());
        po.term1.erase(po.term1.begin() + i);
    }
    return po;
}
polynomial operator*(const polynomial &a, const polynomial &b)
{
    polynomial po;

    for (int i = 0; i < a.term1.size(); i++)
    {
        for (int j = 0; j < b.term1.size(); j++)
        {
            po.term1.push_back((a.term1[i]) * (b.term1[j]));
        }
    }
    po.sort();
    return po;
}
void operator+=(polynomial &a, const polynomial &b)
{
    bool che = false;
    for (int i = 0; i < b.term1.size(); i++)
    {
        for (int j = 0; j < a.term1.size(); j++)
        {
            if (b.term1[i].get_p() == a.term1[j].get_p())
            {
                a.term1[j].set_c(a.term1[j].get_c() + b.term1[i].get_c());
                che = true;
                break;
            }
        }
        if (che == false)
        {
            a.term1.push_back(b.term1[i]);
        }
        che = false;
    }
    a.sort();
}
void operator-=(polynomial &a, polynomial &b)
{
    bool che = false;
    for (int i = 0; i < b.term1.size(); i++)
    {
        for (int j = 0; j < a.term1.size(); j++)
        {
            if (b.term1[i].get_p() == a.term1[j].get_p())
            {
                a.term1[j].set_c(a.term1[j].get_c() - b.term1[i].get_c());
                che = true;
                break;
            }
        }
        if (che == false)
        {
            b.term1[i].set_c(b.term1[i].get_c() * -1);
            a.term1.push_back(b.term1[i]);
        }
        che = false;
    }
    a.sort();
}
void operator*=(polynomial &a, const polynomial &b)
{
    vector<term> termm;

    for (int i = 0; i < a.term1.size(); i++)
    {
        for (int j = 0; j < b.term1.size(); j++)
        {
            termm.push_back((a.term1[i]) * (b.term1[j]));
        }
    }
    a.term1 = termm;
    a.sort();
}
bool operator>(polynomial &a, polynomial &b)
{
    a.sort();
    b.sort();
    bool ch;
    for (int i = 0; i < b.term1.size(); i++)
    {
        if (a.term1[i] > b.term1[i])
        {
            ch=true;
            break;
        }
        else if (a.term1[i] == b.term1[i])
        {
        }
        else
        {
            ch=false;
            break;
        }
    }
    return ch;
}
bool operator<(polynomial &a, polynomial &b)
{
    a.sort();
    b.sort();
    bool ch;
    for (int i = 0; i < b.term1.size(); i++)
    {
        if (a.term1[i] < b.term1[i])
        {
            ch=true;
            break;
        }
        else if (a.term1[i] == b.term1[i])
        {
        }
        else
        {
            ch=false;
            break;
        }
    }
    return ch;
}
bool operator>=(polynomial &a, polynomial &b)
{
    a.sort();
    b.sort();
    bool ch=true;
    for (int i = 0; i < b.term1.size(); i++)
    {
        if (a.term1[i] > b.term1[i])
        {
            ch=true;
            break;
        }
        else if (a.term1[i] == b.term1[i])
        {
        }
        else
        {
            ch=false;
            break;
        }
    }
    return ch;
}
bool operator<=(polynomial &a, polynomial &b)
{
    a.sort();
    b.sort();
    bool ch=true;
    for (int i = 0; i < b.term1.size(); i++)
    {
        if (a.term1[i] < b.term1[i])
        {
            ch=true;
            break;
        }
        else if (a.term1[i] == b.term1[i])
        {
        }
        else
        {
            ch=false;
            break;
        }
    }
    return ch;
}
bool operator==( polynomial &a,  polynomial &b)
{
	a.sort();
    b.sort();
    for (int i = 0; i < b.term1.size(); i++)
    {
        if (a.term1[i] != b.term1[i])
        {
            return false;
        }
    }
    return true;
}
bool operator!=( polynomial &a, polynomial &b)
{
	a.sort();
    b.sort();
     for (int i = 0; i < b.term1.size(); i++)
    {
        if (a.term1[i] != b.term1[i])
        {
            return true;
        }
    }
    return false;
}

ostream &operator<<(ostream &out, const polynomial &b)
{
    for (int i = 0; i < b.term1.size() - 1; i++)
    {
        out << b.term1[i] << '+';
    }
    out << b.term1[b.term1.size() - 1] << endl;
    return out;
};
istream &operator>>(istream &in, polynomial &p1)
{
    string s, s1;
    in >> s;
    term t;//x^2+x^3
    while (s.find('+')>0&&s.find('+')<s.size())
    {
        s1 = s.substr(0, s.find('+')); // 3x^2+x^5+x^6
        s = s.substr(s.find('+') + 1);
        t.str_to_term(s1);
        p1.term1.push_back(t);      
    }
    t.str_to_term(s);
    p1.term1.push_back(t);
    return in;
}
int main()
{
    int check; 
    int current_polynomial = 0;
    int check_pol;
    polynomial obj;
    // cout<<obj<<endl;
    cout << "1.new polynomiral\n";
    cout << "2.load from text file\n";
    cout << "3.load from binary file\n";
    cout << "4.Quit\n";
    cout << "enter your selected item:";
    cin >> check;
    while(check!=4){
    if (check == 1)
    {
    
        cout << "1.add\n";
        cout << "2.subtract\n";
        cout << "3.multiply\n";
        cout << "4.derivative\n";
        cout << "5.find degree\n";
        cout << "6.find value for spectific x\n";
        cout << "7.compare\n";
        cout << "8.save to text fine\n";
        cout << "9.save to a binary file\n";
        cout << "10.back to main menu\n";
        cin >> check_pol;
        while(check_pol!=10){
        if (check_pol == 1)
        {	
        polynomial p1;
        cin>>p1;
        obj+=p1;
        }
        else if (check_pol == 2)
        {
        	polynomial p1;
        	cin>>p1;
        	obj-=p1;
        }
        else if (check_pol == 3)
        {
        	polynomial p1;
        	cin>>p1;
        	obj*=p1;
    
        }
        else if (check_pol == 4)
        {
      	    obj=~(obj);
          //cout << obj;
        }
        else if (check_pol == 5)
        {
        	cout<<obj.get_degree()<<endl;
        }
        else if (check_pol == 6)
        {
        	int x;
        	cin>>x;
        	cout<<obj(x)<<endl;
        }
        else if (check_pol == 7)
        {
       	polynomial p1;
       	cin>>p1;
       	cout<<"current_polynomial > other_poly_nomial:";
       	cout<<(obj>p1)<<endl;
       	cout<<"current_polynomial >=other_poly_nomial:";
       	cout<<(obj>=p1)<<endl;
       	cout<<"current_polynomial <other_poly_nomial:";
       	cout<<(obj<p1)<<endl;
       	cout<<"current_polynomial <= other_poly_nomial:";
       	cout<<(obj<=p1)<<endl;
       	cout<<"current_polynomial == other_poly_nomial:";
       	cout<<(obj==p1)<<endl;
        }
        else if (check_pol == 8)
        {
            writefile(obj);
        }
        else if (check_pol == 9)
        {
            string a;
            cout << "enter file name : ";
            cin >> a;
            binaryWrite(obj,a);
        }
        cout << "1.add\n";
        cout << "2.subtract\n";
        cout << "3.multiply\n";
        cout << "4.derivative\n";
        cout << "5.find degree\n";
        cout << "6.find value for spectific x\n";
        cout << "7.compare\n";
        cout << "8.save to text fine\n";
        cout << "9.save to a binary file\n";
        cout << "10.back to main menu\n";
        cin >> check_pol;
        }
    }
    else if (check == 2)
    {
        readfile(obj);
    }
    else if (check == 3)
    {
        string a;
        cout << "enter file name : ";
        cin >> a;
        binaryread(obj,a);
    }
    cout<<obj<<endl;
    cout << "1.new polynomiral\n";
    cout << "2.load from text file\n";
    cout << "3.load from binary file\n";
    cout << "4.Quit\n";
    cout << "enter your selected item:";
    cin >> check;
    }
}
void writefile(polynomial p){
    string a;
    cout << "enter file name : ";
    cin >> a;
    a+=".txt";
    ofstream myfile(a,ios::out);
    if(myfile){
        myfile << p << endl;
        myfile.close();
    }
    else{
        cerr << "There is an error in the file!";
    }
}
void readfile(polynomial &p){
     string a;
     string b;
    cout << "enter file name : ";
    cin >> a;
    a+=".txt";
    ifstream myfile1(a,ios::in);
    if(myfile1){
        myfile1 >> b;
        string s1;
        term t;
    while (b.find('+')>0&&b.find('+')<b.size())
    {
        s1 = b.substr(0, b.find('+')); // 3x^2+x^5+x^6
        b = b.substr(b.find('+') + 1);
        t.str_to_term(s1);
        p.term1.push_back(t);      
    }
    t.str_to_term(b);
    p.term1.push_back(t);
    myfile1.close();
    }
    else{
        cerr << "file not read!";
    }
}
void binaryread(polynomial& poly, string fileName) {
    ifstream obj(fileName, ios::binary);
    if (obj) {
        poly.term1.clear();
        int size;
        obj.read((char*)&size, sizeof (int));
        poly.term1.resize(size);
        for (int i = 0; i < size; i++) {
            obj.read((char*)&poly.term1[i], sizeof(term));
        }
        obj.close();
        return;
    }
    cout << "I cant open the file.\n";
}
void binaryWrite(polynomial& poly, string fileName) {   
    ofstream obj(fileName + ".polynomial", ios::binary);
    if (obj) {
        int size = poly.term1.size();
        obj.write((char*)&size, sizeof (int));
        for (int i = 0; i < size; i++) {
            obj.write((char*)&poly.term1[i], sizeof(term));
        }
        obj.close();
        return;
    }
    cout << "I cant open the file.\n";
}
